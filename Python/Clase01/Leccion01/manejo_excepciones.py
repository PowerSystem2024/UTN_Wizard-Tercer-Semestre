from NumerosIgualesException import NumerosIgualesException

# üåü MANEJO DE EXCEPCIONES EN PYTHON

# ============================
# üí• Ejemplo 1: Excepci√≥n gen√©rica
# ============================
# Intentamos dividir 10 entre 0 (lo cual no es v√°lido).
# Se captura cualquier tipo de excepci√≥n con la clase base 'Exception'.
try:
    10 / 0
except Exception as e:  # Captura general (no espec√≠fica)
    print(f"Ocurri√≥ un error: {e}")

# ============================
# üí• Ejemplo 2: Error al dividir y usar tipos incorrectos
# ============================
resultado = None
a = "10"  # Es una cadena
b = 0
try:
    resultado = a / b  # Error: no se puede dividir string entre entero
except Exception as e:
    print(f"Ocurri√≥ un error: {e}")

print(f"El resultado es: {resultado}")
print("Seguimos con el programa...\n")

# ============================
# üí• Ejemplo 3: Excepciones espec√≠ficas
# ============================
# Se maneja cada tipo de error por separado para mayor precisi√≥n
resultado = None
a = 7
b = 0
try:
    resultado = a / b
except TypeError as e:
    print(f"TypeError - Ocurri√≥ un error: {type(e)}")
except ZeroDivisionError as e:
    print(f"ZeroDivisionError - Ocurri√≥ un error: {type(e)}")
except Exception as e:
    print(f"Exception - Otro error: {type(e)}")

print(f"El resultado es: {resultado}")
print("Seguimos con el programa...\n")

# ============================
# üí• Ejemplo 4: Entrada por teclado + excepci√≥n personalizada
# ============================
# Este bloque incluye:
# - `raise` para lanzar un error manualmente si los n√∫meros ingresados son iguales
# - `else` para ejecutar solo si no hubo error
# - `finally` que se ejecuta siempre
resultado = None
try:
    a = int(input("Digite el primer n√∫mero: "))
    b = int(input("Digite el segundo n√∫mero: "))
    
    if a == b:
        raise NumerosIgualesException("üö´ Los n√∫meros ingresados son iguales")
    
    resultado = a / b

except TypeError as e:
    print(f"‚ùå TypeError - Tipo de dato inv√°lido: {type(e)}")
except ZeroDivisionError as e:
    print(f"‚ùå ZeroDivisionError - Divisi√≥n entre cero: {type(e)}")
except NumerosIgualesException as e:
    print(f"‚ùå NumerosIgualesException - {e}")
except Exception as e:
    print(f"‚ùå Error desconocido: {type(e)}")

else:
    print("‚úÖ No se arroj√≥ ninguna excepci√≥n")

finally:
    print("üìå Bloque finally: se ejecuta siempre, haya error o no")

print(f"Resultado final: {resultado}")
print("Programa terminado correctamente ‚úÖ")
